// Generated by Haxe 4.3.7
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Creator = function() { };
Creator.__name__ = true;
Creator.handleDelte = function(e) {
	e.remove();
};
Creator.getText = function() {
	var text = Creator.inputElement.value;
	if(StringTools.trim(text) != "") {
		Creator.inputElement.value = "";
		return text;
	} else {
		return false;
	}
};
Creator.logOnPage = function() {
	var element = window.document.createElement("p");
	var text = Creator.getText();
	if(text) {
		element.textContent = text;
		element.classList.add("todoEl");
		element.addEventListener("click",function() {
			Creator.handleDelte(element);
		});
		Creator.mainElement.appendChild(element);
	} else {
		window.alert("You have to type something!");
	}
};
var Test = function(name) {
	if(name == null) {
		name = "Marto";
	}
	this.name = name;
};
Test.__name__ = true;
Test.prototype = {
	greet: function() {
		return "Hello! I am " + this.name;
	}
};
var Dog = function(name) {
	if(name == null) {
		name = "Marto";
	}
	Test.call(this,name);
};
Dog.__name__ = true;
Dog.bark = function() {
	return "Bark!";
};
Dog.__super__ = Test;
Dog.prototype = $extend(Test.prototype,{
	greet: function() {
		return "Hi! I am " + this.name + " the Dog!";
	}
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) first = f(x.next(),first);
	return first;
};
var Main = function() { };
Main.__name__ = true;
Main.alertMessage = function(message) {
	window.alert(Std.string(message));
};
Main.handleForm = function(e) {
	e.preventDefault();
	Creator.logOnPage();
};
Main.main = function() {
	var result = Lambda.fold([1,2,3,4,111111],function(acc,e) {
		return acc + e;
	},0);
	console.log("src/Main.hx:24:",result);
	var btn = window.document.createElement("button");
	btn.textContent = "New BTN";
	btn.addEventListener("click",function() {
		Main.alertMessage(result == null ? "null" : "" + result);
	});
	window.document.getElementById("mainSection").appendChild(btn);
	window.document.getElementById("createForm").addEventListener("submit",Main.handleForm);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Creator.mainElement = window.document.getElementById("todos");
Creator.inputElement = window.document.getElementById("todoInput");
Main.main();
})({});
