// Generated by Haxe 4.3.7
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
var TodoStatus = $hxEnums["TodoStatus"] = { __ename__:true,__constructs__:null
	,Completed: {_hx_name:"Completed",_hx_index:0,__enum__:"TodoStatus",toString:$estr}
	,Pending: {_hx_name:"Pending",_hx_index:1,__enum__:"TodoStatus",toString:$estr}
};
TodoStatus.__constructs__ = [TodoStatus.Completed,TodoStatus.Pending];
var Main = function() { };
Main.__name__ = true;
Main.getAllTodos = function(res) {
	var response = { data : Main.todos, status : "success"};
	res.writeHead(200,{ "Content-Type" : "application/json"});
	res.end(JSON.stringify(response));
};
Main.createTodo = function(req,res) {
	var data;
	req.on("data",function(chunk) {
		data = JSON.parse(chunk);
		data.id = Main.count;
		Main.count++;
		Main.todos.push(data);
	});
	req.on("end",function() {
		res.writeHead(201,{ "Content-Type" : "application/json"});
		res.end("{\"success\": true}");
	});
};
Main.updateTodo = function(req,res,id) {
	var data;
	req.on("data",function(chunk) {
		data = JSON.parse(chunk);
		var _this = Main.todos;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var todo = _this[i];
			if(todo.id == id) {
				todo.status = data.status;
			}
			result[i] = todo;
		}
		Main.todos = result;
	});
	req.on("end",function() {
		res.writeHead(201,{ "Content-Type" : "application/json"});
		res.end("{\"success\": true}");
	});
};
Main.deleteTodo = function(res,id) {
	var _g = [];
	var _g1 = 0;
	var _g2 = Main.todos;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v.id != id) {
			_g.push(v);
		}
	}
	Main.todos = _g;
	res.writeHead(200,{ "Content-Type" : "application/json"});
	res.end("{\"success\": true}");
};
Main.main = function() {
	var server = js_node_Http.createServer(function(req,res) {
		var url = req.url;
		var method = req.method;
		console.log("src/Main.hx:96:",url);
		res.setHeader("Access-Control-Allow-Origin","*");
		res.setHeader("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS");
		res.setHeader("Access-Control-Allow-Headers","Content-Type");
		if(method == "OPTIONS") {
			res.writeHead(200);
			res.end();
			return;
		}
		console.log("src/Main.hx:107:",method);
		if(url == "/todos") {
			if(method == "GET") {
				Main.getAllTodos(res);
			} else if(method == "POST") {
				Main.createTodo(req,res);
			} else {
				var urlStr = url;
				if(Std.parseInt(urlStr.split("id=")[1]) != null && method == "DELETE") {
					var currentId = Std.parseInt(urlStr.split("id=")[1]);
					Main.deleteTodo(res,currentId);
				} else {
					var urlStr = url;
					if(Std.parseInt(urlStr.split("id=")[1]) != null) {
						console.log("src/Main.hx:121:",method);
						var currentId = Std.parseInt(urlStr.split("id=")[1]);
						Main.updateTodo(req,res,currentId);
					} else {
						res.writeHead(404,{ "Content-Type" : "text/plain"});
						res.end("Not Found");
					}
				}
			}
		} else {
			var urlStr = url;
			if(Std.parseInt(urlStr.split("id=")[1]) != null && method == "DELETE") {
				var currentId = Std.parseInt(urlStr.split("id=")[1]);
				Main.deleteTodo(res,currentId);
			} else {
				var urlStr = url;
				if(Std.parseInt(urlStr.split("id=")[1]) != null) {
					console.log("src/Main.hx:121:",method);
					var currentId = Std.parseInt(urlStr.split("id=")[1]);
					Main.updateTodo(req,res,currentId);
				} else {
					res.writeHead(404,{ "Content-Type" : "text/plain"});
					res.end("Not Found");
				}
			}
		}
	});
	server.listen(3000,function() {
		console.log("src/Main.hx:134:","Server running at http://localhost:3000/");
	});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Http = require("http");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.todos = [];
Main.count = 0;
Main.main();
})({});
